name: CI testing - complete

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:  # Trigger the workflow on push or pull request, but only for the master branch
  push:
    branches: [master, "release/*"]
  pull_request:
    branches: [master, "release/*"]
    types: [opened, reopened, ready_for_review, synchronize]

jobs:
  pytest:

    runs-on: ${{ matrix.os }}
    if: github.event.pull_request.draft == false
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macOS-10.15, windows-2019]
        python-version: [3.6, 3.8, 3.9]
        requires: ['minimal', 'latest']
        exclude:
          - python-version: 3.6
            requires: 'latest'
          - python-version: 3.9
            requires: 'minimal'

    # Timeout: https://stackoverflow.com/a/59076067/4521646
    timeout-minutes: 35

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Update Pip
      run: |
        pip install "pip>=20.1" --upgrade --user  # needed for get pip cacher folder

    # Github Actions: Run step on specific OS: https://stackoverflow.com/a/57948488/4521646
    - name: Setup macOS
      if: runner.os == 'macOS'
      run: |
        brew install libomp  # https://github.com/pytorch/pytorch/issues/20030

    - name: Set min. dependencies
      if: matrix.requires == 'minimal'
      run: |
        import re, sys
        torch_lut = {'3.8': '1.4', '3.9': '1.7.1'}
        py_ver = f'{sys.version_info.major}.{sys.version_info.minor}'
        if py_ver in torch_lut:
            fpath='requirements.txt'
            req = re.sub(r'torch>=[\d\.]+', f'torch>={torch_lut[py_ver]}', open(fpath).read())
            open(fpath, 'w').write(req)

        for fpath in ('requirements.txt', 'requirements/test.txt', 'requirements/integrate.txt'):
            req = open(fpath).read().replace('>=', '==')
            open(fpath, 'w').write(req)
      shell: python

    # Note: This uses an internal pip API and may not always work
    # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
    - name: Get pip cache
      id: pip-cache
      run: |
        python -c "from pip._internal.locations import USER_CACHE_DIR; print('::set-output name=dir::' + USER_CACHE_DIR)"

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}-pip-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements/test.txt') }}
        restore-keys: ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}-pip-

    - name: Install dependencies
      run: |
        python --version
        pip --version
        pip install --requirement requirements/devel.txt --upgrade --find-links https://download.pytorch.org/whl/cpu/torch_stable.html
        pip uninstall -y torchmetrics
        pip list
      shell: bash

    - name: Tests
      run: |
        phmdoctest README.md --outfile tests/test_readme.py
        python -m pytest torchmetrics tests -v --cov=torchmetrics --junitxml=junit/test-results-${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.requires }}.xml

    - name: Upload pytest test results
      uses: actions/upload-artifact@v2
      with:
        name: pytest-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}
        path: junit/test-results-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.requires }}.xml
      if: failure()

    - name: Statistics
      if: success()
      run: |
        coverage xml
        coverage report

    - run: |
        echo "::set-output name=TORCH::$(python -c 'import torch ; print(torch.__version__)' 2>&1)"
      id: info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: cpu,pytest,${{ runner.os }},python${{ matrix.python-version }},torch${{ steps.info.outputs.TORCH }}
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Integrations
      run: |
        python -m pytest integrations -v --durations=25
